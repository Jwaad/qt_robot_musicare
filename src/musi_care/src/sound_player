#!/usr/bin/env python

#TODO REDO THIS CODE A BIT AND MAKE IT ENTIRELY WORK AS A SERVICE. EVERYTHING WILL BE VIA CALL BACK. ITLL WORK BETTER THAT WAY
#TODO any messages that come in during that torrent of error messages is ignored.... FIX THAT

#You can request a track to be played through a service call. 
#This node will publish information about the song at 10/s
#
##How to load a track:
#example: operation = "load_track", operation_data_1 = "filename" operation_data_2 = float()
#
##How to play a track:
#example: operation = "start_track", operation_data_1 = "filename" operation_data_2 = float(track_starting_time_in_secs)
#
##How to pause or resume a track
#example: operation = "pause_resume", operation_data_1 = "" operation_data_2 = float()
#
##How to stop a track
#example: operation = "stop_track", operation_data_1 = "" operation_data_2 = float()
#
##How to change volume
#example: operation = "volume", operation_data_1 = "" operation_data_2 = float(volume)
#
##How to get song data
#example: operation = "request_data", operation_data_1 = "" operation_data_2 = float()

#test track path = /home/qtrobot/catkin_ws/src/musi_care/src/game_assets/guess_tone_game/music/test_sound.wav

import pyaudio
import wave
import rospy
import os
from subprocess import call
from pynput import keyboard
from musi_care.msg import SongData
from musi_care.srv import sound_player_srv

class PlayAudio():
    """Service that receives input requests for tracks to be played
       Node that publishes information of the current sound playing"""
    
    def __init__(self):
        rospy.init_node('sound_player')
        rospy.loginfo("Sound Player Node has been launched")
        self.song_data_pub = rospy.Publisher('song_data', SongData, queue_size=10)
        self.service = rospy.Service('sound_player_service', sound_player_srv, self.service_callback)
        rospy.loginfo("Sound Player Service has been launched")
        self.sound_player_fps = 20
        self.idle_rate = rospy.Rate(self.sound_player_fps)   #Decides how often the node sleeps for before checking for new messages. This will also delay the call back that is sent on start_track
        self.stream_rate = rospy.Rate(self.sound_player_fps) #This decides how often this node will publish, as well as how often we can pause the song. IE with 10/s we can pause every 0.1s
        self.file_path = "" #initialise here so we can start the while loop later
        self.paused = False
        self.currently_streaming = False
        self.call_back_triggered = False
        self.track_title = ""
        self.elapsed_time = 0.0
        self.total_track_time = 999
        
    def service_callback(self, data):
        """Code to handle what to do when service is called"""
        #Set variables
        self.call_back_triggered = False #If this is false, we wont break out of the loop that plays and check the music, set to true when you want the code to start again from the top with new vars
        song_data_temp = self.get_song_data()
        track_title= song_data_temp.track_title
        elapsed_time = song_data_temp.track_elapsed_time
        total_time = song_data_temp.track_total_time
        #---LOAD DATA---
        if  data.operation == "load_track":
            rospy.loginfo("Sound Player: Received request to load track")
            if self.currently_streaming: #end the current playing track
                rospy.loginfo("Sound Player: Ending current track to load new track")
                self.end_audio_steam()
                self.currently_streaming = False
            this_path = os.path.dirname(os.path.abspath(__file__)) # path to this file
            #file_path = data.operation_data_1 # for absolute path
            file_path = this_path + data.operation_data_1 # relative path
            self.start_time = 0
            #check filepath
            file_path_valid = self.check_valid_filepath(file_path)
            if file_path_valid:
                self.file_path = file_path
                rospy.loginfo("Sound Player: File path to audio confirmed")
                self.track_title = file_path
                self.paused=True
                self.call_back_triggered = True
                return track_title, elapsed_time, total_time, True
            else:
                rospy.loginfo("\033[1;33;1mSound Player: Could not find requested file. \033[0m")
                return track_title, elapsed_time, total_time, False
        #---START TRACK---
        elif data.operation == "start_track":
            rospy.loginfo("Sound Player: Received request to start track")
            if self.currently_streaming: #end the current playing track
                rospy.loginfo("Sound Player: Ending current track to play new track")
                self.end_audio_steam()
                self.currently_streaming = False
            this_path = os.path.dirname(os.path.abspath(__file__)) # path to this file
            #file_path = data.operation_data_1 # for absolute path
            file_path = this_path + data.operation_data_1 # relative path
            self.start_time = data.operation_data_2
            #check filepath
            file_path_valid = self.check_valid_filepath(file_path)
            if file_path_valid:
                self.file_path = file_path
                rospy.loginfo("Sound Player: File path to audio confirmed")
                self.track_title = file_path
                self.paused=False
                self.call_back_triggered = True
                return track_title, elapsed_time, total_time, True
            else:
                rospy.loginfo("\033[1;33;1mSound Player: Could not find requested file. \033[0m")
                return track_title, elapsed_time, total_time, False
        #---PAUSE / RESUME TRACK---
        elif data.operation == "pause_resume":
            rospy.loginfo("Sound Player: Received request to pause / resume track")
            if self.currently_streaming:
                self.pause_resume()
            else:
                rospy.loginfo("\033[1;33;1mSound Player: Invalid pause request, not currently streaming \033[0m")
                return track_title, elapsed_time, total_time, False
        #---PAUSE TRACK---
        elif data.operation == "pause":
            rospy.loginfo("Sound Player: Received request to pause track")
            if self.currently_streaming and not self.paused: #only attempt to pause if it's not already paused
                self.pause_resume()
            else:
                rospy.loginfo("\033[1;33;1mSound Player: Invalid pause request \033[0m")
                return track_title, elapsed_time, total_time, False
        #---RESUME TRACK---
        elif data.operation == "resume":
            rospy.loginfo("Sound Player: Received request to resume track")
            if self.currently_streaming and self.paused: #only attempt to pause if it's not already paused
                self.pause_resume()
            else:
                rospy.loginfo("\033[1;33;1mSound Player: Invalid resume request \033[0m")
                return track_title, elapsed_time, total_time, False
        #---STOP TRACK---
        elif data.operation == "stop_track":
            rospy.loginfo("Sound Player: Received request to stop track")
            if self.currently_streaming:
                self.end_audio_steam()
                return track_title, elapsed_time, total_time, True
            else:
                rospy.loginfo("\033[1;33;1mSound Player: Invalid stop request, not currently streaming \033[0m")
                return track_title, elapsed_time, total_time, False
        #---CHANGE MASTER VOLUME---
        elif data.operation == "volume":
            volume = data.operation_data_2
            if 0 <= volume <= 100:
                call(["amixer", "-D", "pulse", "sset", "Master", str(volume)+"%"])
                return track_title, elapsed_time, total_time, True
            else:
                rospy.loginfo("\033[1;33;1mSound Player: Volume greater than 100 or less than 0 entered \033[0m")
                return track_title, elapsed_time, total_time, False
        #---RETURN DATA---
        elif data.operation == "request_data":
            return track_title, elapsed_time, total_time, True
        #---UNRECOGNISED COMMAND---
        else:
            rospy.loginfo("\033[1;33;1mSound Player: Invalid operation entered \033[0m")
            return track_title, elapsed_time, total_time, False
        self.call_back_triggered = True
        return track_title, elapsed_time, total_time, True
    
    
    def start_audio_steam(self, file_path, start_time):
        """Starts sound stream with the path to the file """
        #log info
        rospy.loginfo("Sound Player: Starting audio stream...")
        start_stream_error = False

        #load wav into memory
        try:
            self.wf = wave.open(file_path, 'rb') #audio played must be wav
        except: 
            rospy.loginfo("\033[1;33;1mSound Player: Specified file is the wrong format \033[0m")
            return False
        
        #If above fails, dont do the rest.
        if not start_stream_error:
        
            #Set variables
            print("--------------- I WILL DEAL WITH THESE MESSAGES EVENTUALLY... ---------------")
            self.player = pyaudio.PyAudio() #Due to bluetooth drivers it gives error messages
            self.elapsed_time = 0.0 + start_time
            print("--------------- IGNORE THE TORRENT OF ERRORS ABOVE ---------------")    

            #get out required information
            self.frame_rate = self.wf.getframerate()
            self.total_frames = self.wf.getnframes()
            self.total_track_time = self.total_frames/ self.frame_rate
            #self.track_title = file_path.split("/")[-1]

            #convert start_time from secs to frames
            if start_time < self.total_track_time: #Check if the use has made a mistake
                if start_time > 0.1: # dont bother if start time == 0
                    start_frame = start_time*self.frame_rate
                    self.wf.setpos(int(start_frame))
            else:
                rospy.loginfo("\033[1;33;1mSound Player: The specified track starting time is longer than the total track time \033[0m")
                start_stream_error = True
                return False
                
            #setup stream
            self.stream = self.player.open(format=self.player.get_format_from_width(self.wf.getsampwidth()),
                    channels=self.wf.getnchannels(),
                    rate=self.wf.getframerate(),
                    output=True,
                    stream_callback=self.audio_callback)   
            
            #start stream if we should
            if self.paused:
                self.stream.stop_stream()
            else:
                self.stream.start_stream()
            self.currently_streaming = True #stream is ready
            return True
                
                   
    def end_audio_steam(self):
        """Ends the audio steam and resets some variables"""

        #close player related things
        if self.currently_streaming:
        
            #reset variables
            self.file_path = "error"
            self.elapsed_time = 0.0
            self.total_track_time = 999
            self.paused = False
        
            #close stream
            self.stream.stop_stream()
            self.stream.close()
            self.wf.close()

            #Close PyAudio
            self.player.terminate()
        
            #log info
            rospy.loginfo("Sound Player: Audio stream ended")
            
        self.currently_streaming = False
         
         
    def audio_callback(self, in_data, frame_count, time_info, status):
        """Call back for audio stream that tells it from where to play from"""
        data = self.wf.readframes(frame_count)
        return (data, pyaudio.paContinue)      
        
        
    def check_valid_filepath(self,file_path):
        """Checks that if file path is vaild"""
        if os.path.isfile(file_path):
            return True
        else:
            return False
            

    def get_song_data(self):
        song_data = SongData() #import msg type
        song_data.track_title = self.track_title
        song_data.track_elapsed_time = self.elapsed_time   # time elapsed in seconds, in seconds with 1 decimal place. Floored ie 0.1999 = 0.1.
        song_data.track_total_time = self.total_track_time # total track time in seconds
        return song_data 


    def pub_song_information(self):
        """Collect relevant data and publish it to the topic 'SongData' """
        song_data_msg = self.get_song_data()
        self.song_data_pub.publish(song_data_msg)
    

    def pause_resume(self):
        """method to pause when unpaused, and unpause when paused"""
        #If the stream was paused, resume it
        if self.paused:
            self.stream.start_stream()
            rospy.loginfo("Sound Player: Track was unpaused")
            self.paused = False
        #If the stream is playing, pause it
        else:
            self.stream.stop_stream()
            rospy.loginfo("Sound Player: Track was paused")
            self.paused = True
           
    
    def publish_empty_message(self):
        """Publish this when there's no track playing"""
        song_data = SongData() #import msg type
        song_data.track_title = ""
        song_data.track_total_time = 999        # total track time in seconds
        song_data.track_elapsed_time = 0        # time elapsed in seconds, in seconds with 1 decimal place. Floored ie 0.1999 = 0.1.
        self.song_data_pub.publish(song_data)


    def main(self):
        """main """ #TODO GET RID OF THIS AND TURN THIS INTO SERVICE ONLY
        while not rospy.is_shutdown():
            
            #Wait until this service is called
            while not self.call_back_triggered and not rospy.is_shutdown():
                self.publish_empty_message() #publish that we have no song playing currently
                self.idle_rate.sleep()  # Save processing and have this loop sleep often
            self.call_back_triggered = False # we have dealt with the call back being raised, so return it to false 
            
            #Rest of code goes in here, such that if rospy shuts down in the above loop, this code doesn't occur
            if not rospy.is_shutdown():
                
                #Play audio file at given time
                audio_started = self.start_audio_steam(self.file_path, self.start_time)
                if audio_started:
                    rospy.loginfo("Sound Player: Audio stream started")
                    self.currently_streaming = True
                else:
                    self.currently_streaming = False
                track_ended = (self.elapsed_time > self.total_track_time)    
                    
                #Wait for stream to end and listen out for certain messages such as pause, resume etc
                while self.currently_streaming and (not rospy.is_shutdown()) and not track_ended :
                    self.pub_song_information()
                    self.stream_rate.sleep()        #Save processing and have this loop sleep  
                    track_ended = (self.elapsed_time >= self.total_track_time) 
                    if track_ended:
                        rospy.loginfo("Sound Player: Track has ended")
                    if not self.paused:             #Don't add to the stream time while the stream is paused 
                        self.elapsed_time += 1/self.sound_player_fps    #Is equal to the FPS of sound_player
                
                #end stream
                if self.currently_streaming:
                    rospy.loginfo("Sound Player: Ending audio stream...")
                self.end_audio_steam()
                
        
if __name__ == '__main__':
    player = PlayAudio() #instantise
    try:
        player.main() #start the process
    except rospy.ROSInterruptException:
        pass
    rospy.loginfo("Sound Player: Closed successfully")    
