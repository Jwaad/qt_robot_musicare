#!/usr/bin/env python
from __future__ import print_function

import rospy
import cv2

from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from qt_nuitrack_app.msg import Faces, FaceInfo


class face_tracker:
    faces = None
    faces_time = None

    def __init__(self):
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/color/image_raw", Image, self.image_callback)
        self.face_sub = rospy.Subscriber("/qt_nuitrack_app/faces", Faces, self.face_callback)

    def face_callback(self, data):
        self.faces = data.faces
        self.faces_time = rospy.Time.now()
        (rows, cols, channels) = self.cv_image.shape
        new_faces = self.faces
        new_faces_time = self.faces_time

        if new_faces and (rospy.Time.now()-new_faces_time) < rospy.Duration(5.0):
            for face in new_faces:
                rect = face.rectangle
                x = int(rect[0]*cols)
                y = int(rect[1]*rows)
                w = int(rect[2]*cols)
                h = int(rect[3]*rows)
                print(x,w,y,h)
                cv2.rectangle(self.cv_image, (x, y), (x+w, y+h), (255,0,0), 2)
                cv2.imshow("QT Vision", self.cv_image)
                key = cv2.waitKey(1)

    def image_callback(self, data):
        try:
            self.cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)

if __name__ == '__main__':
    rospy.init_node('qt_face_recognition', anonymous=True)
    ft = face_tracker()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
