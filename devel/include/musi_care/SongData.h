// Generated by gencpp from file musi_care/SongData.msg
// DO NOT EDIT!


#ifndef MUSI_CARE_MESSAGE_SONGDATA_H
#define MUSI_CARE_MESSAGE_SONGDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace musi_care
{
template <class ContainerAllocator>
struct SongData_
{
  typedef SongData_<ContainerAllocator> Type;

  SongData_()
    : track_title()
    , track_elapsed_time(0.0)
    , track_total_time(0.0)  {
    }
  SongData_(const ContainerAllocator& _alloc)
    : track_title(_alloc)
    , track_elapsed_time(0.0)
    , track_total_time(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _track_title_type;
  _track_title_type track_title;

   typedef float _track_elapsed_time_type;
  _track_elapsed_time_type track_elapsed_time;

   typedef float _track_total_time_type;
  _track_total_time_type track_total_time;





  typedef boost::shared_ptr< ::musi_care::SongData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::musi_care::SongData_<ContainerAllocator> const> ConstPtr;

}; // struct SongData_

typedef ::musi_care::SongData_<std::allocator<void> > SongData;

typedef boost::shared_ptr< ::musi_care::SongData > SongDataPtr;
typedef boost::shared_ptr< ::musi_care::SongData const> SongDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::musi_care::SongData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::musi_care::SongData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::musi_care::SongData_<ContainerAllocator1> & lhs, const ::musi_care::SongData_<ContainerAllocator2> & rhs)
{
  return lhs.track_title == rhs.track_title &&
    lhs.track_elapsed_time == rhs.track_elapsed_time &&
    lhs.track_total_time == rhs.track_total_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::musi_care::SongData_<ContainerAllocator1> & lhs, const ::musi_care::SongData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace musi_care

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::musi_care::SongData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::musi_care::SongData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::musi_care::SongData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::musi_care::SongData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::musi_care::SongData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::musi_care::SongData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::musi_care::SongData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82324e20ca3e42f8d6a8f9e9503524ba";
  }

  static const char* value(const ::musi_care::SongData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82324e20ca3e42f8ULL;
  static const uint64_t static_value2 = 0xd6a8f9e9503524baULL;
};

template<class ContainerAllocator>
struct DataType< ::musi_care::SongData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "musi_care/SongData";
  }

  static const char* value(const ::musi_care::SongData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::musi_care::SongData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string track_title\n"
"float32 track_elapsed_time\n"
"float32 track_total_time\n"
;
  }

  static const char* value(const ::musi_care::SongData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::musi_care::SongData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.track_title);
      stream.next(m.track_elapsed_time);
      stream.next(m.track_total_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SongData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::musi_care::SongData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::musi_care::SongData_<ContainerAllocator>& v)
  {
    s << indent << "track_title: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.track_title);
    s << indent << "track_elapsed_time: ";
    Printer<float>::stream(s, indent + "  ", v.track_elapsed_time);
    s << indent << "track_total_time: ";
    Printer<float>::stream(s, indent + "  ", v.track_total_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MUSI_CARE_MESSAGE_SONGDATA_H
