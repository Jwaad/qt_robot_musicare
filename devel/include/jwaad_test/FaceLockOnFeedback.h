// Generated by gencpp from file jwaad_test/FaceLockOnFeedback.msg
// DO NOT EDIT!


#ifndef JWAAD_TEST_MESSAGE_FACELOCKONFEEDBACK_H
#define JWAAD_TEST_MESSAGE_FACELOCKONFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jwaad_test
{
template <class ContainerAllocator>
struct FaceLockOnFeedback_
{
  typedef FaceLockOnFeedback_<ContainerAllocator> Type;

  FaceLockOnFeedback_()
    : remaining_y_offset(0)
    , remaining_x_offset(0)  {
    }
  FaceLockOnFeedback_(const ContainerAllocator& _alloc)
    : remaining_y_offset(0)
    , remaining_x_offset(0)  {
  (void)_alloc;
    }



   typedef int16_t _remaining_y_offset_type;
  _remaining_y_offset_type remaining_y_offset;

   typedef int16_t _remaining_x_offset_type;
  _remaining_x_offset_type remaining_x_offset;





  typedef boost::shared_ptr< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct FaceLockOnFeedback_

typedef ::jwaad_test::FaceLockOnFeedback_<std::allocator<void> > FaceLockOnFeedback;

typedef boost::shared_ptr< ::jwaad_test::FaceLockOnFeedback > FaceLockOnFeedbackPtr;
typedef boost::shared_ptr< ::jwaad_test::FaceLockOnFeedback const> FaceLockOnFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator1> & lhs, const ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.remaining_y_offset == rhs.remaining_y_offset &&
    lhs.remaining_x_offset == rhs.remaining_x_offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator1> & lhs, const ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jwaad_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f85529854f9db9feef1acea870997bcc";
  }

  static const char* value(const ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf85529854f9db9feULL;
  static const uint64_t static_value2 = 0xef1acea870997bccULL;
};

template<class ContainerAllocator>
struct DataType< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jwaad_test/FaceLockOnFeedback";
  }

  static const char* value(const ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"int16 remaining_y_offset\n"
"int16 remaining_x_offset\n"
"\n"
;
  }

  static const char* value(const ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.remaining_y_offset);
      stream.next(m.remaining_x_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaceLockOnFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jwaad_test::FaceLockOnFeedback_<ContainerAllocator>& v)
  {
    s << indent << "remaining_y_offset: ";
    Printer<int16_t>::stream(s, indent + "  ", v.remaining_y_offset);
    s << indent << "remaining_x_offset: ";
    Printer<int16_t>::stream(s, indent + "  ", v.remaining_x_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JWAAD_TEST_MESSAGE_FACELOCKONFEEDBACK_H
